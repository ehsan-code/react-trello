{"version":3,"sources":["Components/TrelloCard.js","actions/listsActions.js","actions/cardsActions.js","actions/index.js","Components/TrelloActionButton.js","Components/TrelloList.js","Components/App.js","reducers/listsReducer.js","reducers/index.js","store/index.js","index.js"],"names":["CardContainer","styled","div","TrelloCard","text","id","index","draggableId","String","provided","ref","innerRef","draggableProps","dragHandleProps","Card","CardContent","Typography","gutterBottom","addList","title","type","CONSTANTS","ADD_LIST","payload","sort","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","DRAG_HAPPENED","addCard","listID","ADD_CARD","TrelloActionButton","state","formOpen","openForm","setState","closeForm","e","handleInputChange","target","value","handleAddList","dispatch","props","handleAddCard","renderAddButton","list","buttonText","buttonTextOpacity","buttonTextColor","buttonTextBackground","onClick","style","styles","openFormButtonGroup","opacity","color","backgroundColor","Icon","renderForm","placeholder","buttonTitle","minHeight","minWidth","padding","autoFocus","onBlur","onChange","overflow","resize","width","outline","border","formButtonGroup","Button","onMouseDown","variant","marginLeft","cursor","this","React","Component","display","alignitems","borderRadius","height","paddingLeft","marginTop","allignItems","connect","ListContainer","TrelloList","cards","droppableId","droppableProps","map","card","App","onDragEnd","result","destination","source","lists","direction","cardID","initialState","listsReducer","action","newList","newCard","console","log","newState","splice","find","listStart","listEnd","combineReducers","store","createStore","rootReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4135a24.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\n\r\nconst CardContainer = styled.div`\r\n  margin-bottom: 8px;\r\n`;\r\n\r\nconst TrelloCard = ({ text, id, index }) => {\r\n  return (\r\n    <Draggable draggableId={String(id)} index={index}>\r\n      {(provided) => (\r\n        <CardContainer\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <Card>\r\n            <CardContent>\r\n              <Typography gutterBottom>{text}</Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </CardContainer>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default TrelloCard;\r\n","import { CONSTANTS } from \"../actions\";\r\nexport const addList = (title) => {\r\n  return {\r\n    type: CONSTANTS.ADD_LIST,\r\n    payload: title,\r\n  };\r\n};\r\n\r\nexport const sort = (\r\n  droppableIdStart,\r\n  droppableIdEnd,\r\n  droppableIndexStart,\r\n  droppableIndexEnd,\r\n  draggableId,\r\n  type\r\n) => {\r\n  return {\r\n    type: CONSTANTS.DRAG_HAPPENED,\r\n    payload: {\r\n      droppableIdStart,\r\n      droppableIdEnd,\r\n      droppableIndexStart,\r\n      droppableIndexEnd,\r\n      draggableId,\r\n      type,\r\n    },\r\n  };\r\n};\r\n","import { CONSTANTS } from \"../actions\";\r\n\r\nexport const addCard = (listID, text) => {\r\n  return {\r\n    type: CONSTANTS.ADD_CARD,\r\n    payload: { text, listID },\r\n  };\r\n};\r\n","export * from \"./listsActions\";\r\nexport * from \"./cardsActions\";\r\nexport const CONSTANTS = {\r\n  ADD_CARD: \"ADD_CARD\",\r\n  ADD_LIST: \"ADD_LIST\",\r\n  DRAG_HAPPENED: \"DRAG_HAPPENED\",\r\n};\r\n","import { Icon } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Textarea from \"react-textarea-autosize\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { connect } from \"react-redux\";\r\nimport { addList, addCard } from \"../actions\";\r\n\r\nclass TrelloActionButton extends React.Component {\r\n  state = {\r\n    formOpen: false,\r\n    text: \"\",\r\n  };\r\n\r\n  openForm = () => {\r\n    this.setState({\r\n      formOpen: true,\r\n    });\r\n  };\r\n  closeForm = (e) => {\r\n    this.setState({\r\n      formOpen: false,\r\n    });\r\n  };\r\n\r\n  handleInputChange = (e) => {\r\n    this.setState({\r\n      text: e.target.value,\r\n    });\r\n  };\r\n  handleAddList = () => {\r\n    const { dispatch } = this.props;\r\n    const { text } = this.state;\r\n\r\n    if (text) {\r\n      this.setState({ text: \"\" });\r\n      dispatch(addList(text));\r\n    }\r\n    return;\r\n  };\r\n  handleAddCard = () => {\r\n    const { dispatch, listID } = this.props;\r\n    const { text } = this.state;\r\n\r\n    if (text) {\r\n      this.setState({ text: \"\" });\r\n      dispatch(addCard(listID, text));\r\n    }\r\n  };\r\n\r\n  renderAddButton = () => {\r\n    const { list } = this.props;\r\n\r\n    const buttonText = list ? \"Add another list\" : \"Add another Card\";\r\n    const buttonTextOpacity = list ? 1 : 0.5;\r\n    const buttonTextColor = list ? \"white\" : \"inherit\";\r\n    const buttonTextBackground = list ? \"rgba(0,0,0,.15\" : \"inherit\";\r\n    return (\r\n      <div\r\n        onClick={this.openForm}\r\n        style={{\r\n          ...styles.openFormButtonGroup,\r\n          opacity: buttonTextOpacity,\r\n          color: buttonTextColor,\r\n          backgroundColor: buttonTextBackground,\r\n        }}\r\n      >\r\n        <Icon>add</Icon>\r\n        <p>{buttonText}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderForm = () => {\r\n    const { list } = this.props;\r\n    const placeholder = list ? \"Enter list Title\" : \"Enter title for this card\";\r\n\r\n    const buttonTitle = list ? \"Add List\" : \"Add card\";\r\n    return (\r\n      <div>\r\n        <Card\r\n          style={{\r\n            minHeight: 85,\r\n            minWidth: 272,\r\n            padding: \"6px 8px 2px\",\r\n          }}\r\n        >\r\n          <Textarea\r\n            placeholder={placeholder}\r\n            autoFocus\r\n            onBlur={this.closeForm}\r\n            value={this.state.text}\r\n            onChange={this.handleInputChange}\r\n            style={{\r\n              overflow: \"hidden\",\r\n              resize: \"none\",\r\n              width: \"100%\",\r\n              outline: \"none\",\r\n              border: \"none\",\r\n            }}\r\n          />\r\n        </Card>\r\n        <div style={styles.formButtonGroup}>\r\n          <Button\r\n            onMouseDown={list ? this.handleAddList : this.handleAddCard}\r\n            variant=\"contained\"\r\n            style={{ color: \"white\", backgroundColor: \"#5aac44\" }}\r\n          >\r\n            {buttonTitle}{\" \"}\r\n          </Button>\r\n          <Icon style={{ marginLeft: 8, cursor: \"pointer\" }}>close</Icon>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return this.state.formOpen ? this.renderForm() : this.renderAddButton();\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  openFormButtonGroup: {\r\n    display: \"flex\",\r\n    alignitems: \"center\",\r\n    cursor: \"pointer\",\r\n    borderRadius: 3,\r\n    height: 36,\r\n    width: 272,\r\n    paddingLeft: 10,\r\n  },\r\n  formButtonGroup: {\r\n    marginTop: 8,\r\n    display: \"flex\",\r\n    allignItems: \"center\",\r\n  },\r\n};\r\n\r\nexport default connect()(TrelloActionButton);\r\n","import React from \"react\";\r\nimport TrelloCard from \"./TrelloCard\";\r\nimport TrelloActionButton from \"./TrelloActionButton\";\r\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ListContainer = styled.div`\r\n  background-color: #dfe3e6;\r\n  border-radius: 5px;\r\n  width: 300px;\r\n  color: black;\r\n  font-family: Arial;\r\n  padding: 8px;\r\n  height: 100%;\r\n  margin-right: 8px;\r\n`;\r\nconst TrelloList = ({ title, cards, listID, index }) => {\r\n  return (\r\n    <Draggable draggableId={String(listID)} index={index}>\r\n      {(provided) => (\r\n        <ListContainer\r\n          {...provided.draggableProps}\r\n          ref={provided.innerRef}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <Droppable droppableId={String(listID)}>\r\n            {(provided) => (\r\n              <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                <h3>{title}</h3>\r\n                {cards.map((card, index) => (\r\n                  <TrelloCard\r\n                    key={card.id}\r\n                    text={card.text}\r\n                    index={index}\r\n                    id={card.id}\r\n                  />\r\n                ))}\r\n                {provided.placeholder}\r\n                <TrelloActionButton listID={listID} />\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </ListContainer>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default TrelloList;\r\n","import React, { Component } from \"react\";\nimport TrelloList from \"./TrelloList\";\nimport { connect } from \"react-redux\";\nimport TrelloActionButton from \"./TrelloActionButton\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { sort } from \"../actions\";\nimport styled from \"styled-components\";\n\nconst ListContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nclass App extends Component {\n  onDragEnd = (result) => {\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) {\n      return;\n    }\n    this.props.dispatch(\n      sort(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index,\n        draggableId,\n        type\n      )\n    );\n  };\n\n  render() {\n    const { lists } = this.props;\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <div>\n          <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\n            {(provided) => (\n              <ListContainer\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                {lists.map((list, index) => (\n                  <TrelloList\n                    listID={list.id}\n                    key={list.id}\n                    title={list.title}\n                    cards={list.cards}\n                    index={index}\n                  />\n                ))}\n                {provided.placeholder}\n                <TrelloActionButton list />\n              </ListContainer>\n            )}\n          </Droppable>\n        </div>\n      </DragDropContext>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  lists: state.lists,\n});\n\nexport default connect(mapStateToProps)(App);\n","import { CONSTANTS } from \"../actions\";\r\n\r\nlet listID = 2;\r\nlet cardID = 6;\r\n\r\nconst initialState = [\r\n  {\r\n    title: \"list 1\",\r\n    id: `list-${0}`,\r\n    cards: [\r\n      {\r\n        id: `card-${0}`,\r\n        text: \"the static list and static card\",\r\n      },\r\n      {\r\n        id: `card-${1}`,\r\n        text: \"this is the second card \",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: \"list 2\",\r\n    id: `list-${1}`,\r\n    cards: [\r\n      {\r\n        id: `card-${2}`,\r\n        text: \"this is my first reducer\",\r\n      },\r\n      {\r\n        id: `card-${3}`,\r\n        text: \"this is the second reducer \",\r\n      },\r\n      {\r\n        id: `card-${4}`,\r\n        text: \"this is the 3rd reducer\",\r\n      },\r\n      {\r\n        id: `card-${5}`,\r\n        text: \"Anything after this is dynamic\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst listsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CONSTANTS.ADD_LIST:\r\n      const newList = {\r\n        title: action.payload,\r\n        cards: [],\r\n        id: `list-${listID}`,\r\n      };\r\n      listID += 1;\r\n      return [...state, newList];\r\n\r\n    case CONSTANTS.ADD_CARD: {\r\n      const newCard = {\r\n        text: action.payload.text,\r\n        id: `card-${cardID}`,\r\n      };\r\n      cardID += 1;\r\n      console.log(\"action received\", action);\r\n      const newState = state.map((list) => {\r\n        if (list.id === action.payload.listID) {\r\n          return {\r\n            ...list,\r\n            cards: [...list.cards, newCard],\r\n          };\r\n        } else {\r\n          return list;\r\n        }\r\n      });\r\n\r\n      return newState;\r\n    }\r\n    case CONSTANTS.DRAG_HAPPENED:\r\n      const {\r\n        droppableIdStart,\r\n        droppableIdEnd,\r\n        droppableIndexEnd,\r\n        droppableIndexStart,\r\n        draggableId,\r\n        type,\r\n      } = action.payload;\r\n      const newState = [...state];\r\n\r\n      // dragging lists around\r\n      if (type === \"list\") {\r\n        const list = newState.splice(droppableIndexStart, 1);\r\n        newState.splice(droppableIndexEnd, 0, ...list);\r\n        return newState;\r\n      }\r\n      if (droppableIdStart === droppableIdEnd) {\r\n        // same list dropping\r\n        const list = state.find((list) => droppableIdStart === list.id);\r\n        const card = list.cards.splice(droppableIndexStart, 1);\r\n        list.cards.splice(droppableIndexEnd, 0, ...card);\r\n      }\r\n      // other list dropping\r\n      if (droppableIdStart !== droppableIdEnd) {\r\n        const listStart = state.find((list) => droppableIdStart === list.id);\r\n\r\n        const card = listStart.cards.splice(droppableIndexStart, 1);\r\n\r\n        const listEnd = state.find((list) => droppableIdEnd === list.id);\r\n\r\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\r\n      }\r\n      return newState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default listsReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport listsReducer from \"./listsReducer\";\r\n\r\nexport default combineReducers({\r\n  lists: listsReducer,\r\n});\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"../reducers\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}